<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://collection.dlese.org" xmlns="http://collection.dlese.org" xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0.00">
	<xsd:annotation>
		<xsd:documentation>***  SCHEMA EXPLANATION  ****</xsd:documentation>
		<xsd:documentation>This is the MAIN schema for the DLESE collection-level metadata framework. This MAIN schema calls other CATEGORY schemas to create the metadata framework structure. CATEGORY schemas may call other CATEGORY schemas or VOCABULARY schemas to build the metadata structure.</xsd:documentation>
	</xsd:annotation>
	<xsd:annotation>
		<xsd:documentation>***  NAMESPACES  ********</xsd:documentation>
		<xsd:documentation>The chameleon approach to namespace conventions is used in the CATEGORY and VOCABULARY schemas. Only this MAIN schema has a target namespace, http://collection.dlese.org. The CATEGORY and VOCABULARY schemas do not have target namespaces (allows for plug-n-play components and vocabularies).	</xsd:documentation>
	</xsd:annotation>
	<xsd:annotation>
		<xsd:documentation>***  ROOT ELEMENT  *****  The root element of this schema is collectionRecord.</xsd:documentation>
	</xsd:annotation>
	<xsd:annotation>
		<xsd:documentation>***  SCHEMA DEVELOPMENT  *****</xsd:documentation>      
		<xsd:documentation>The Venetian Blind approach is used for this MAIN schema and all other CATEGORY and VOCABULARY schemas. Elements within all schemas are used for fields (quantities). When elements have controlled vocabularies that are hierarchal, the vocabularies appear in the element as a colon separated text string.	Attributes are used when additional information is required for the content of an element or if two pieces of information are required. </xsd:documentation>
	</xsd:annotation>
	<xsd:annotation>
		<xsd:documentation>***  USE OF COMMONFIELDS.XSD SCHEMA  ******</xsd:documentation>     
		<xsd:documentation>A COMMONFIELDS (commonfields.xsd) schema is used when metadata fields (elements or attributes) appear in more than one CATEGORY schema. For example, person is used in the CATEGORY schemas of lifecycle.xsd and metaMetadata.xsd. Therefore, person is defined in the commonfields.xsd schema.</xsd:documentation>
	</xsd:annotation>
	<xsd:annotation>
		<xsd:documentation>*** DEFINING COMPLEX and SIMPLE TYPES  *******</xsd:documentation>
		<xsd:documentation>Since the metadata framework uses Venetian Blind schema development, most metadata fields are defined as complex or simple types. This improves re-use for other frameworks developed at the DLESE Program Center (DPC) or within the DLESE community. As such, each schema has a complex and simple type section. Built-in simple types asre defined when an elment is defined. Derived simple types are used when a metadata field appears more than once in a CATEGORY schema or if restrictions are needed on element content. </xsd:documentation>
	</xsd:annotation>
	<xsd:annotation>
		<xsd:documentation>*** LICENSE INFORMATION *****
		Copyright 2002, 2003 DLESE Program Center
		University Corporation for Atmospheric Research (UCAR)
		P.O. Box 3000, Boulder, CO 80307, United States of America
		email: support@dlese.org.</xsd:documentation>
		<xsd:documentation>These schemas are free software; you can redistribute them and/or modify them under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  These schemas are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this project; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</xsd:documentation>
	</xsd:annotation>

	<xsd:annotation>
		<xsd:documentation>*****  CATEGORY schemas to include  *************************</xsd:documentation>
	</xsd:annotation>
	<xsd:include schemaLocation="categories/commonfields.xsd"/>
	<xsd:include schemaLocation="categories/approval.xsd"/>
	<xsd:include schemaLocation="categories/access.xsd"/>
	<xsd:include schemaLocation="categories/general.xsd"/>
	<xsd:include schemaLocation="categories/lifecycle.xsd"/>
	<xsd:include schemaLocation="categories/metaMetadata.xsd"/>
	<xsd:include schemaLocation="categories/nsdl.xsd"/>
	<xsd:include schemaLocation="categories/relations.xsd"/>

	<xsd:annotation>
		<xsd:documentation>*****  VOCABULARY schemas to include  *************************</xsd:documentation>
	</xsd:annotation>

	<xsd:annotation>
		<xsd:documentation>*****  ROOT element *************************</xsd:documentation>
	</xsd:annotation>
	<xsd:element name="collectionRecord" type="collectionType"/>

	<xsd:annotation>
		<xsd:documentation>collectionType is complex</xsd:documentation>
	</xsd:annotation>

	<xsd:annotation>
		<xsd:documentation>*****    Complex Types  (alpha order)   *************************</xsd:documentation>
	</xsd:annotation>
	<xsd:complexType name="collectionType">
		<xsd:annotation>
			<xsd:documentation>*****  collectionType    *************************</xsd:documentation>
			<xsd:documentation>general is complex; see general.xsd - capture general characteristics about a collection</xsd:documentation>
			<xsd:documentation>lifecycle is complex; see lifecycle.xsd - lists the contact and responsible party for the collection</xsd:documentation>		
			<xsd:documentation>approval is complex; see approval.xsd - tracks collection status and who approved the collection</xsd:documentation>		
			<xsd:documentation>access is complex; see access.xsd - tracks the harvesting and providing info.; tracks key, drc membership and collection location</xsd:documentation>		
			<xsd:documentation>metaMetadata is complex: see metaMetadata.xsd - lists who cataloged the collection record</xsd:documentation>		
			<xsd:documentation>NSDL is complex; see nsdl.xsd - tracks NSDL required information</xsd:documentation>		
			<xsd:documentation>relations is complex; see relations.xsd - tracks related collections (super and sub collections)</xsd:documentation>		
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="general" type="generalType" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="lifecycle" type="lifecycleType" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="approval" type="approvalType" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="access" type="accessType" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="metaMetadata" type="metaMetadataType" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="NSDL" type="NSDLType" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="relations" type="relationsType" minOccurs="0" maxOccurs="1"/>
		</xsd:sequence>
	</xsd:complexType>
</xsd:schema>
