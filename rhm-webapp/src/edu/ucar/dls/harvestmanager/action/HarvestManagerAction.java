package edu.ucar.dls.harvestmanager.action;




import java.util.*;
import java.lang.*;
import java.text.*;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import edu.ucar.dls.harvestmanager.HarvestManager;
import edu.ucar.dls.harvestmanager.action.form.HarvestManagerForm;

import javax.servlet.*;
import javax.servlet.http.*;

/**
 *  Action controller for the Harvest Repository Manager.
 *
 * @author     John Weatherley
 */
public final class HarvestManagerAction extends Action {
	private static boolean debug = true;


	// --------------------------------------------------------- Public Methods

	/**
	 *  Process the specified HTTP request, and create the corresponding HTTP
	 *  response (or forward to another web component that will create it). Return
	 *  an <code>ActionForward</code> instance describing where and how control
	 *  should be forwarded, or <code>null</code> if the response has already been
	 *  completed.
	 *
	 * @param  mapping        The ActionMapping used to select this instance
	 * @param  response       The HTTP response we are creating
	 * @param  form           The ActionForm for the given page
	 * @param  req            The HTTP request.
	 * @return                The ActionForward instance describing where and how
	 *      control should be forwarded
	 * @exception  Exception  If error.
	 */
	public ActionForward execute (
			ActionMapping mapping,
			ActionForm form,
			HttpServletRequest req,
			HttpServletResponse response)
			 throws Exception {

	/* 	
	One HTTP message is sent to the CRS at http://crs.nsdl.org/harvest/ingest_results.php indicating success or failure at the 'end' of the process. 
	Parameters are: status=[status code]&uuid=[uuid]&ts=[timestamp] 
	[status code] values are: 2 = completion 3 = completion with errors or warnings 4 = failure 
	[uuid] = the unique id of the harvest attempt - generated by the CRS when the harvest request is generated 
	[ts] = current time stamp (ISO8601 plus UTC Zed) 	 
	*/			 
				 
		ServletContext servletContext = getServlet().getServletContext();
		HarvestManager harvestManager = (HarvestManager)servletContext.getAttribute("harvestManager");
		HarvestManagerForm hmf = (HarvestManagerForm)form;
		
		ActionErrors errors = new ActionErrors();

		try {
			
			prtln(req.getRequestURI());
			
			// Log the status notification from the harvest ingest processor:
			if(req.getRequestURI().endsWith("log_results.do")) {
				String status = req.getParameter("status");
				String statusCodeDescriptiion = req.getParameter("description");
				String statusMsg = "";
				if(status != null) {
					if (status.equals("2"))
						statusMsg = " (success)";
					else if (status.equals("3"))
						statusMsg = " (success, with warnings)";
					else if (status.equals("4"))
						statusMsg = " (failure)";
					else if (status.equals("5"))
						statusMsg = " (failure - timeout)";					
				}				
				String uuid = req.getParameter("uuid");	
				String ts = req.getParameter("ts");
				hmf.setStatusNotificationMsg("  Status: " + status + statusMsg + "<br/>\n  Timestamp: " + ts + "<br/>\n  UUID: " + uuid);
				//prtln("Logging status:"+status+" uuid:" + uuid + " ts:" + ts);
				try{
					harvestManager.logHarvestStatus(status,statusCodeDescriptiion, uuid,ts);
				} catch (Exception e) {
					String err = "Unable to log harvest status (status notification could not be understood): " + e;
					err += ". Status notification received was '" + req.getRequestURL() + "' from " +  req.getRemoteAddr();
					// tmp since this isn't working right now
					e.printStackTrace();
					prtlnErr(err);
					hmf.setErrorMsg(err);
					return mapping.findForward("log.results.fail");
				}
				return mapping.findForward("log.results.success");
			}
			
			// Trigger a harvest manually:
			if(req.getRequestURI().endsWith("admin/trigger_harvest.do")) {
				String id = req.getParameter("id");
				String runType = req.getParameter("runType"); // full_reharvest or check
				String protocol = req.getParameter("protocol"); // blank for is default indicated in the collection config, or 'harvestedRecordsDB' to re-harvest from the last set of records in the DB
				// First refresh collections from NCS to be sure they're up to date:
				try {
					harvestManager.updateCollectionsFromDCS();
				} catch (Throwable t) {
					String err = "Unable to update from DCS: " + t;
					prtlnErr(err);
				}				
				
				try {
					harvestManager.triggerHarvest(id,runType, true, protocol);
				} catch (Exception e) {
					String err = "Unable to trigger harvest: " + e;
					prtlnErr(err);
					hmf.setErrorMsg(err);
				}
				return mapping.findForward("trigger.action.result");
			}
			
			// Refresh collections list manually:
			if(req.getRequestURI().endsWith("admin/refresh_from_ncs.do")) {
				String action = req.getParameter("action");
				String srcPage = req.getParameter("srcPage");
				if(action != null && action.equals("refreshFromNcs")){
					try {
						harvestManager.updateCollectionsFromDCS();
					} catch (Throwable t) {
						String err = "Unable to update from DCS: " + t;
						prtlnErr(err);
						hmf.setErrorMsg(err);
					}
				}
				if(srcPage != null && srcPage.equals("collOverview"))
					return mapping.findForward("refresh.ncs.collOverview");
				return mapping.findForward("refresh.ncs.collDetails");
			}

		} catch (NullPointerException e) {
			prtln("HarvestManagerAction caught exception.");
			e.printStackTrace();
			return mapping.findForward("log.results.fail");
		} catch (Throwable e) {
			prtln("HarvestManagerAction caught exception: " + e);
			return mapping.findForward("log.results.fail");
		}
		
		return mapping.findForward("log.results.fail");	
	}


	// ---------------------- Debug info --------------------

	/**
	 *  Return a string for the current time and date, sutiable for display in log
	 *  files and output to standout:
	 *
	 * @return    The dateStamp value
	 */
	protected final static String getDateStamp() {
		return
				new SimpleDateFormat("MMM d, yyyy h:mm:ss a zzz").format(new Date());
	}


	/**
	 *  Output a line of text to error out, with datestamp.
	 *
	 * @param  s  The text that will be output to error out.
	 */
	private final void prtlnErr(String s) {
		System.err.println(getDateStamp() + " HarvestManagerAction Error: " + s);
	}



	/**
	 *  Output a line of text to standard out, with datestamp, if debug is set to
	 *  true.
	 *
	 * @param  s  The String that will be output.
	 */
	private final void prtln(String s) {
		if (debug) {
			System.out.println(getDateStamp() + " HarvestManagerAction: " + s);
		}
	}


	/**
	 *  Sets the debug attribute of the object
	 *
	 * @param  db  The new debug value
	 */
	public static void setDebug(boolean db) {
		debug = db;
	}
}


