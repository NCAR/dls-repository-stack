/*
 *  License and Copyright:
 *
 *  The contents of this file are subject to the Educational Community License v1.0 (the "License"); you may
 *  not use this file except in compliance with the License. You should have received a copy of the License
 *  along with this software; if not, you may obtain a copy of the License at
 *  http://www.opensource.org/licenses/ecl1.php.
 *
 *  Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND,
 *  either express or implied. See the License for the specific language governing rights and limitations
 *  under the License.
 *
 *  Copyright 2002-2009 by Digital Learning Sciences, University Corporation for Atmospheric Research (UCAR).
 *  All rights reserved.
 */

package edu.ucar.dls.oai.harvester;

import java.util.Date;

/**
 *  Interface that recieves status messages about the progress of an OAI harvest as it occurs.
 *
 * @author     John Weatherley
 * @version    $Id: HarvestMessageHandler.java,v 1.9 2009/03/20 23:33:53 jweather Exp $
 * @see        Harvester
 */
public interface HarvestMessageHandler {

	/**
	 *  A status message indicating the number of records currenlty harvested and the number of resumption tokens
	 *  issued.
	 *
	 * @param  recordCount      Number of recrods currently harvested.
	 * @param  resumptionCount  Number of resumption tokens currently issued.
	 * @see                     #getNumRecordsForStatusNotification()
	 */
	public void statusMessage(int recordCount, int resumptionCount);


	/**
	 *  A status message indicating an event that took place during the harvest, such as a request made to the
	 *  data provider.
	 *
	 * @param  msg  A harvest status message generated by the harvester.
	 */
	public void statusMessage(String msg);


	/**
	 *  Gets the number of records the Harveser should harvest between sending statusMessage notifications to
	 *  this HarvestMessageHandler.
	 *
	 * @return    The numRecordsForStatusNotification value.
	 * @see       #statusMessage(String msg)
	 */
	public int getNumRecordsForStatusNotification();

	/**
	 *  Sets harvest attributes for this harvest.
	 *
	 * @param  from   The from date or null if none used
	 * @param  until  The until date or null if none used
	 */	
	public void setHarvestAttributes(Date from, Date until);	
	
	/**
	 *  A message generated by the harvester when an <a href="http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#ErrorConditions">
	 *  OAI protocol error</a> has occured.
	 *
	 * @param  oaiError      The OAI error code, for example "noRecordsMatch".
	 * @param  errorMessage  The accompanying message returned by the data provider, if any.
	 * @param  supportedGranularity  Supported granularity [days, seconds] or null
	 * @param  deletedRecordSupport  Deleted record support [no, transient, persistent] or null	 	 
	 */
	public void oaiErrorMessage(String oaiError, String errorMessage, String supportedGranularity, String deletedRecordSupport);


	/**
	 *  A serios error that occured during the harvest, preventing it from completing. For example an http 500
	 *  error or a parsing error.
	 *
	 * @param  msg  Description of the error.
	 */
	public void errorMessage(String msg);


	/**
	 *  A final report detailing the result of a successful harvest. This method is only called if the harvest
	 *  completes successfully with no errors.
	 *
	 * @param  recordCount           The total number of records harvested.
	 * @param  resumptionCount       Number of resumption tokens issued.
	 * @param  baseURL               The baseURL that was harvested.
	 * @param  set                   The set that was harvested, or an empty string if none.
	 * @param  startTime             The time the harvest began.
	 * @param  endTime               The time the harvest was completed.
	 * @param  zipFilePathName       The full path to the harvest zip file, or null if none.
	 * @param  supportedGranularity  Supported granularity [days, seconds]
	 * @param  deletedRecordSupport  Deleted record support [no, transient, persistent]
	 */
	public void completedHarvestMessage(
	                                    int recordCount,
	                                    int resumptionCount,
	                                    String baseURL,
	                                    String set,
	                                    long startTime,
	                                    long endTime,
	                                    String zipFilePathName,
	                                    String supportedGranularity,
	                                    String deletedRecordSupport);

}

