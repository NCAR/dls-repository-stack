/*
	Copyright 2017 Digital Learning Sciences (DLS) at the
	University Corporation for Atmospheric Research (UCAR),
	P.O. Box 3000, Boulder, CO 80307

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/
package edu.ucar.dls.schemedit.display;

import edu.ucar.dls.schemedit.input.InputManager;
import edu.ucar.dls.util.strings.FindAndReplace;

import java.util.*;


/**
 *  Maintains the state of collapsible nodes in the metadata Editor. States are
 *  OPENED and CLOSED, and the default is controlled by setDefaultState.
 *
 *@author    ostwald $Id: CollapseUtils.java,v 1.4 2005/01/28 00:15:38 ostwald
 *      Exp $
 */
public class CollapseUtils {
	private boolean debug = true;

	/**
	 *  Array of mappings to encoded strings used for javascript variables used by
	 *  <b>pathToId</b> and <b>idToPath</b> .
	 */
	static String[][] replacementTable = {
			{"$", "_dollar_"},
			{"{", "_leftcurly_"},
			{"}", "_rightcurly_"},
			{"+", "_plus_"},
			{" ", "_space_"},
			{"/", "_^_"},
			{"-", "_dash_"},
			{":", "_colon_"},
			{",", "_comma_"},
			{";", "_smcolon_"},
			{"|", "_vert_"},
			{"'", "_qt_"},
			{".", "_dot_"},
			};


	/**
	 *  Converts a paramName and fieldLabel to an ID that can be used in
	 *  javascript. Used to support collapsible field display in metadata editor.
	 *
	 *@param  paramName   Identifier used in metadata editor jsp (e.g.,
	 *      ValueOf(/itemRecord/general))
	 *@param  fieldLabel  MetadataVocab Field label that identifies a field
	 *      grouping within a list of controlled vocab values
	 *@return             ID suitable for use in jsp/javascript
	 */
	public static String pairToId(String paramName, String fieldLabel) {
		// prtln("pairToId with paramName:" + paramName + " and fieldLabel: " + fieldLabel);

		String s1 = InputManager.stripFunctionCall(paramName);
		if (s1 == null) {
			s1 = paramName;
		}

		String ret = pathToId(s1 + "|" + fieldLabel);
		// prtln("  ... returning " + ret);
		return ret;
	}


	/**
	 *  Converts an ID like that generated by {@link
	 *  edu.ucar.dls.schemedit.SchemEditUtils#pathToId} to an xpath that will
	 *  identify the xml element associated with the id.
	 *
	 *@param  id  Description of the Parameter
	 *@return     Description of the Return Value
	 */
	public static String idToPath(String id) {
		// prtln("idToPath with \"" + id + "\"");
		return decodeId (id);
	}

	public static String encodeId (String s) {
		// prtln ("encodeId() about to do replaces for " + s);
		String[][] rt = replacementTable;
		for (int i = 0; i < rt.length; i++) {
			String find = rt[i][0];
			String replace = rt[i][1];
			s = FindAndReplace.replace(s, find, replace, true);
		}
		return s;
	}
		
	public static String decodeId (String s) {
		// prtln ("decodeId() about to do replaces for " + s);
		String[][] rt = replacementTable;
		for (int i = 0; i < rt.length; i++) {
			String find = rt[i][1];
			String replace = rt[i][0];
			// prtln ("replacing " + find + " with " + replace);
			s = FindAndReplace.replace(s, find, replace, true);
		}
		return s;
	}
	
	/**
	 *  Converts an xpath to an ID that can be used in javascript. Used to support
	 *  collapsible field display in metadata editor. The ID that is generated here
	 *  can be converted back into an xpath by {@link
	 *  edu.ucar.dls.schemedit.SchemEditUtils#idToPath}
	 *
	 *@param  s  An xpath or a paramName containing an xpath (e.g.,
	 *      ValueOf(/itemRecord/general))
	 *@return    ID suitable for use in jsp/javascript
	 */
	public static String pathToId(String s) {
		// prtln("pathToId with " + s);

		// stripFunctionCall strips extra stuff away from xpath, but
		// returns null if no stuff is found ..
		String ret = InputManager.stripFunctionCall(s);
		if (ret == null) {
			ret = s;
		}

		return encodeId (ret);
	}

	/**
	 *  Description of the Method
	 *
	 *@param  s  Description of the Parameter
	 *@return    Description of the Return Value
	 */
	private static String ppKey(String s) {
		return idToPath(s);
	}

	/**
	 *  Description of the Method
	 *
	 *@param  s  Description of the Parameter
	 */
	protected final void prtln(String s) {
		if (debug) {
			// System.out.println("CollapseUtils: " + s);
			System.out.println(s);
		}
	}
}

